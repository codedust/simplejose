// SPDX-FileCopyrightText: 2021 2016-2020 Jesse Collis, Evgeny Poberezkin
//
// SPDX-License-Identifier: MIT

let module = {};
"use strict";module.exports = validate20;module.exports.default = validate20;const schema22 = {"title":"JSON Web Key (JWK)","type":"object","description":"JSON Web Key - RFC 7517","required":["kty"],"properties":{"kty":{"type":"string","description":"Key Type","enum":["EC","RSA","oct","OKP"]},"use":{"type":"string","description":"Public Key Use","enum":["sig","enc"]},"key_ops":{"type":"array","description":"Key Operations","items":{"type":"string","enum":["sign","verify","encrypt","decrypt","wrapKey","unwrapKey","deriveKey","deriveBits"]}},"alg":{"type":"string","description":"Algorithm","enum":["PS512","RSA-OAEP-256"]},"kid":{"description":"Key ID","type":"string"},"x5c":{"description":"X.509 Certificate Chain","type":"array","items":{"type":"string"}}}};function validate20(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.kty === undefined) && (missing0 = "kty")){validate20.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.kty !== undefined){let data0 = data.kty;const _errs1 = errors;if(typeof data0 !== "string"){validate20.errors = [{instancePath:instancePath+"/kty",schemaPath:"#/properties/kty/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((((data0 === "EC") || (data0 === "RSA")) || (data0 === "oct")) || (data0 === "OKP"))){validate20.errors = [{instancePath:instancePath+"/kty",schemaPath:"#/properties/kty/enum",keyword:"enum",params:{allowedValues: schema22.properties.kty.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs1 === errors;}else {var valid0 = true;}if(valid0){if(data.use !== undefined){let data1 = data.use;const _errs3 = errors;if(typeof data1 !== "string"){validate20.errors = [{instancePath:instancePath+"/use",schemaPath:"#/properties/use/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((data1 === "sig") || (data1 === "enc"))){validate20.errors = [{instancePath:instancePath+"/use",schemaPath:"#/properties/use/enum",keyword:"enum",params:{allowedValues: schema22.properties.use.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs3 === errors;}else {var valid0 = true;}if(valid0){if(data.key_ops !== undefined){let data2 = data.key_ops;const _errs5 = errors;if(errors === _errs5){if(Array.isArray(data2)){var valid1 = true;const len0 = data2.length;for(let i0=0; i0<len0; i0++){let data3 = data2[i0];const _errs7 = errors;if(typeof data3 !== "string"){validate20.errors = [{instancePath:instancePath+"/key_ops/" + i0,schemaPath:"#/properties/key_ops/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((((((((data3 === "sign") || (data3 === "verify")) || (data3 === "encrypt")) || (data3 === "decrypt")) || (data3 === "wrapKey")) || (data3 === "unwrapKey")) || (data3 === "deriveKey")) || (data3 === "deriveBits"))){validate20.errors = [{instancePath:instancePath+"/key_ops/" + i0,schemaPath:"#/properties/key_ops/items/enum",keyword:"enum",params:{allowedValues: schema22.properties.key_ops.items.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs7 === errors;if(!valid1){break;}}}else {validate20.errors = [{instancePath:instancePath+"/key_ops",schemaPath:"#/properties/key_ops/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.alg !== undefined){let data4 = data.alg;const _errs9 = errors;if(typeof data4 !== "string"){validate20.errors = [{instancePath:instancePath+"/alg",schemaPath:"#/properties/alg/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((data4 === "PS512") || (data4 === "RSA-OAEP-256"))){validate20.errors = [{instancePath:instancePath+"/alg",schemaPath:"#/properties/alg/enum",keyword:"enum",params:{allowedValues: schema22.properties.alg.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs9 === errors;}else {var valid0 = true;}if(valid0){if(data.kid !== undefined){const _errs11 = errors;if(typeof data.kid !== "string"){validate20.errors = [{instancePath:instancePath+"/kid",schemaPath:"#/properties/kid/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs11 === errors;}else {var valid0 = true;}if(valid0){if(data.x5c !== undefined){let data6 = data.x5c;const _errs13 = errors;if(errors === _errs13){if(Array.isArray(data6)){var valid2 = true;const len1 = data6.length;for(let i1=0; i1<len1; i1++){const _errs15 = errors;if(typeof data6[i1] !== "string"){validate20.errors = [{instancePath:instancePath+"/x5c/" + i1,schemaPath:"#/properties/x5c/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs15 === errors;if(!valid2){break;}}}else {validate20.errors = [{instancePath:instancePath+"/x5c",schemaPath:"#/properties/x5c/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs13 === errors;}else {var valid0 = true;}}}}}}}}else {validate20.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate20.errors = vErrors;return errors === 0;}
export default validate20;
